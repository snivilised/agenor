---
# dependencies:
# - ginkgo
# - goi18n
# - golangci-lint
# - goveralls
# - yamllint

version: "3"
silent: true

dotenv: [".env"]

vars:
  FORMAT: json
  BINARY_NAME: traverse
  DEPLOY_DIR: ./locale/deploy
  OUT_DIR: ./locale/out
  L10N_DIR: ./locale/out/l10n
  #
  SOURCE_LANG: en-GB
  SOURCE_ACTIVE: "active.{{.SOURCE_LANG}}.{{.FORMAT}}"
  #
  LANGUAGE_US: en-US
  US_OUT_DIR: "{{.OUT_DIR}}/{{.LANGUAGE_US}}"
  ACTIVE_US: "{{.BINARY_NAME}}.active.en-US.{{.FORMAT}}"
  TRANSLATE_US: "{{.BINARY_NAME}}.translate.en-US.{{.FORMAT}}"
  TRANSLATE_US_FILEPATH: "{{.US_OUT_DIR}}/{{.TRANSLATE_US}}"

tasks:
  # === build ================================================

  b:
    cmds:
      - go build ./...

  # === test =================================================
  # to see how to select tests by label, refer to:
  # https://onsi.github.io/ginkgo/#spec-labels
  #
  # equal: --label-filter="foo"
  #   not: --label-filter="!foo"
  #   and: --label-filter="!foo && bar"
  #    or: --label-filter="!foo || bar"
  # regex: --label-filter="/pattern/"

  dry:
    cmds:
      - ginkgo -v --dry-run ./...

  t:
    cmds:
      - go test ./...

  ta:
    cmds:
      - go test ./tapable

  tc:
    cmds:
      - go test ./cycle

  tk:
    cmds:
      - go test ./internal/kernel

  ti:
    cmds:
      - go test ./i18n

  tl:
    cmds:
      - go test ./locale

  tn:
    cmds:
      - go test ./nfs

  tcore:
    cmds:
      - go test ./core

  tf-filter:
    cmds:
      - go test ./internal/filtering

  tf-hiber:
    cmds:
      - go test ./internal/feat/hiber

  toc:
    cmds:
      - go test ./collections

  tp:
    cmds:
      - go test ./pref

  tt:
    cmds:
      - go test

  clean:
    cmds:
      - go clean

  clean-t:
    cmds:
      - go clean -testcache

  # === ginkgo ================================================

  # initialise a test suite for a package. (only 1 per package)
  boot:
    cmds:
      - ginkgo bootstrap

  # run tests suites recursive
  g:
    cmds:
      - ginkgo -r

  # invoke as task gen -- <item>
  gl:
    cmds:
      - ginkgo -r --label-filter={{.CLI_ARGS}}

  # run tests suites recursive with verbose
  gv:
    cmds:
      - ginkgo -r -v

  # generate a test file for the item provided (item_test.go)
  # invoke as task gen -- <item>
  gen:
    cmds:
      - ginkgo generate {{.CLI_ARGS}}

  # === watch ================================================

  watchv:
    cmds:
      - ginkgo watch -v -r -p ./...

  watchvc:
    cmds:
      - ginkgo watch -v -r -p ./collections

  watchvi:
    cmds:
      - ginkgo watch -v -r -p ./i18n

  watch:
    cmds:
      - ginkgo watch -r -p ./...

  # === lint =================================================

  lint:
    cmds:
      - golangci-lint run

  linty:
    cmds:
      - yamllint *.y*ml

  # === generate =============================================

  enums:
    cmds:
      - go generate ./enums

  # === coverage =============================================

  publish-cover:
    cmds:
      - goveralls -repotoken {{.COVERALLS_TOKEN}}

  cover:
    cmds:
      - mkdir -p ./coverage
      - mkdir -p ./collections/coverage
      - mkdir -p ./core/coverage/
      - mkdir -p ./cycle/coverage
      - mkdir -p ./enums/coverage
      - mkdir -p ./internal/feat/filter/coverage
      - mkdir -p ./internal/feat/hiber/coverage
      - mkdir -p ./internal/feat/resume/coverage
      - mkdir -p ./internal/feat/sampling/coverage
      - mkdir -p ./internal/filtering/coverage
      - mkdir -p ./internal/kernel/coverage
      - mkdir -p ./internal/level/coverage
      - mkdir -p ./internal/measure/coverage
      - mkdir -p ./internal/override/coverage
      - mkdir -p ./internal/services/coverage
      - mkdir -p ./internal/level/coverage
      - mkdir -p ./internal/third/bus/coverage
      - mkdir -p ./internal/third/lo/coverage
      - mkdir -p ./internal/types/coverage
      - mkdir -p ./locale/coverage
      - mkdir -p ./nfs/coverage
      - mkdir -p ./pref/coverage
      - mkdir -p ./tapable/coverage
      - ginkgo --json-report
        ./ginkgo.report
        -coverpkg=./...
        -coverprofile=./coverage/coverage.out -r
      - go tool cover -html=./coverage/coverage.out -o ./coverage/coverage.html
      - open ./coverage/coverage.html

    view-cover:
      cmds:
        - open ./coverage/coverage.html

  # === i18n =================================================

  clear:
    cmds:
      - rm -rf {{.OUT_DIR}}/* --recursive

  # extract i18m messages
  extract:
    cmds:
      - mkdir -p ./locale/out/l10n
      - goi18n extract
        -format json
        -sourceLanguage "en-GB"
        -outdir ./locale/out/l10n

  # new translation
  # where is the default? locale/default/li18ngo.active.en-GB.json not populated
  # ! creates: locale/out/l10n/active.en-GB.json => extracted output
  # ! creates: locale/out/l10n/translate.en-US.json => empty
  newt:
    deps: [extract]
    cmds:
      - touch ./locale/out/l10n/translate.en-US.json

  # derive a translation from the default
  # ! the default active file does not contain hashes, just the extracted content
  # ! the foreign translate file contains the hashes
  # ! the active foreign file (locale/out/l10n/active.en-US.json) is empty
  # ! pass the translate file(locale/out/l10n/translate.en-US.json) to your translator
  # 
  merge:
    cmds:
      - goi18n merge
        -format json
        -sourceLanguage "en-GB"
        -outdir ./locale/out/l10n
        ./locale/out/l10n/active.en-GB.json ./locale/out/l10n/translate.en-US.json

  # update existing translations
  # after running this task, the translation file generated will
  # contain only the new translations. Update the active file,
  # with the new translations. Also, need to copy the default
  # file (active.en-GB.json) back into ./locale/default
  update:
    deps: [extract]
    cmds:
      - goi18n merge
        -format json
        -sourceLanguage "en-GB"
        -outdir ./locale/out
        ./locale/out/active.en-GB.json ./i18n/deploy/active.en-US.json

  # run this after manual translation has occurred to integrate it
  # back into the translation file. Unfortunately, this task doesn't
  # work properly, because it does not include the hashes. Without
  # this task, the new translations must be manually added to the active
  # translation file (active.en-US.json).
  accept:
    cmds:
      - goi18n merge
        -format json
        -sourceLanguage "en-US"
        -outdir ./i18n/temp
        ./locale/out/translate.en-US.json ./i18n/deploy/active.en-US.json
