{
  "Simple i18n Field": {
    "description": "Creates a i18n key/value pair text field",
    "scope": "go",
    "prefix": "kv18",
    "body": [
			"// üçÄ $1",
			"",
			"// $1TemplData",
			"type $1FieldTemplData struct {",
			"  $2TemplData",
      "  $1 string",
			"}",
			"",
			"// Message",
			"func (td $1FieldTemplData) Message() *i18n.Message {",
			"  return &i18n.Message{",
			"    ID:    \"$1.field\",",
			"    Description: \"$1\",",
			"    Other:       \"$1: {{.$1}}\",",
			"  }",
			"}",
			"$0"
    ]
  },

  "Simple Field with Variable i18n Error": {
    "scope": "go",
    "prefix": "fav18e",
    "body": [
      "// üçÄ $1",
      "",
      "// $1TemplData",
      "type $1FieldTemplData struct {",
      "  $2TemplData",
      "  $1 string",
      "}",
      "",
      "// Message",
      "func (td $1FieldTemplData) Message() *i18n.Message {",
      "  return &i18n.Message{",
      "    ID:    \"$1.field\",",
      "    Description: \"$1\",",
      "    Other:       \"$1: {{.$1}}\",",
      "  }",
      "}",
      "",
      "// ‚ùå $3 error",
      "",
      "// New$3Error creates an untranslated error to",
      "// indicate tbd...",
      "func New$3Error(value string) error {",
      "  return errors.Wrap(",
      "    err$3,",
      "    fmt.Sprintf(\"value: %v\", value),",
      "  )",
      "}",
      "",
      "// Is$3Error uses errors.Is to check",
      "// if the err's error tree contains the core error:",
      "// $3Error",
      "func Is$3Error(err error) bool {",
      "  return errors.Is(err, err$3)",
      "}",
      "",
      "var err$3 = errors.New(",
      "  \"tbd...\",",
      ")",
      "",
      "$0"
    ]
  },

  "Variable Native Error": {
    "scope": "go",
    "prefix": "verr",
    "body": [
      "// ‚ùå $1 error",
      "",
      "// New$1Error creates an untranslated error to",
      "// indicate tbd...",
      "func New$1Error(value string) error {",
      "  return errors.Wrap(",
      "    err$1,",
      "    fmt.Sprintf(\"value: %v\", value),",
      "  )",
      "}",
      "",
      "// Is$1Error uses errors.Is to check",
      "// if the err's error tree contains the core error:",
      "// $1Error",
      "func Is$1Error(err error) bool {",
      "  return errors.Is(err, err$1)",
      "}",
      "",
      "var err$1 = errors.New(",
      "  \"tbd...\",",
      ")",
      ""
    ]
  },

  "Ginko Variable Native Error": {
    "scope": "go",
    "prefix": "gverrt",
    "body": [
      "Context(\"$1 error\", func() {",
      "When(\"variant error created\", func() {",
      "  It(\"should: render translated content\", func() {",
      "    const (",
      "      expected = \"wiz...\"",
      "    )",
      "    text := locale.New$1Error(",
      "      \"wiz\",",
      "    ).Error()",
      "    Expect(text).To(Equal(expected))",
      "  })",
      "})",
      "  When(\"given: matching error\", func() {",
      "    It(\"üß™ should: affirm\", func() {",
      "      err := $2.New$1Error(\"bar\")",
      "      Expect(",
      "        $2.Is$1Error(err),",
      "      ).To(BeTrue(),",
      "        \"error does not match $1\",",
      "      )",
      "    })",
      "  })",
      "",
      "  When(\"given: non matching error\", func() {",
      "    It(\"üß™ should: reject\", func() {",
      "      err := errors.New(\"fake\")",
      "      Expect(",
      "        $2.Is$1Error(err),",
      "      ).To(BeFalse(),",
      "        \"not matching error should not match $1\",",
      "      )",
      "    })",
      "  })",
      "})",
      ""
    ]
  },

  "Simple i18n Error": {
    "scope": "go",
    "prefix": "s18e",
    "body": [
			"// ‚ùå $1",
			"",
			"// $1TemplData",
			"type $1ErrorTemplData struct {",
			"  $2TemplData",
			"}",
			"",
			"// Message",
			"func (td $1ErrorTemplData) Message() *i18n.Message {",
			"  return &i18n.Message{",
			"    ID:    \".error\",",
			"    Description: \"description\",",
			"    Other:       \"content\",",
			"  }",
			"}",
			"",
			"type $1Error struct {",
			"  li18ngo.LocalisableError",
			"}",
      "",
      "var Err$1 = $1Error{",
      "  LocalisableError: li18ngo.LocalisableError{",
      "    Data: $1ErrorTemplData{},",
      "  },",
      "}"
    ]
  }
}
